#+TITLE: Vonpupp's Spacemacs configuration (user-config)
#+SETUPFILE:~/org/exobrain/hugo_setup_exobrain.org
#+HUGO_SECTION: exobrain
#+HUGO_CATEGORIES: english configs
#+HUGO_TAGS: emacs
#+STARTUP: overview
#+STARTUP: indent

- confidence :: unfinished
- importance :: 9/10
- nodes :: TBD

* Spacemacs configuration
:PROPERTIES:
:ID:       2b8525ec-88bb-468b-aa16-1532a9377768
:END:
** Extra documentation
:PROPERTIES:
:ID:       eda9cd70-422c-4f1f-89d0-0a8987daa061
:END:
*** Yasnippets
:PROPERTIES:
:ID:       a711e7dd-7785-424f-b0a2-3eab357a530e
:END:
Doc: https://practicalli.github.io/spacemacs/snippets/add-your-own-snippets.html

Select a region and ~SPC SPC helm-yas-create-snippet-on-region~. Create a
snippet and use the the 'key' attribute followed with ~M-/~
*** Android
:PROPERTIES:
:ID:       aa1c762a-2a11-4d62-acc3-322eb85280de
:END:
- Termux + emacs (https://news.ycombinator.com/item?id=13829135)
- https://organice.200ok.ch/sample
- https://play.google.com/store/apps/details?id=com.orgzly&hl=en
** Evil keybindings
:PROPERTIES:
:ID:       dff6d8dc-ed06-42c9-b9b3-df24f6193961
:END:

*** Requirements
:PROPERTIES:
:ID:       98e09993-e22e-40a9-a478-11cc10f0263b
:END:
*Install* ripgrep
#+BEGIN_SRC sh
  pacaur -S ripgrep
#+END_SRC

*** Usage
:PROPERTIES:
:ID:       193c26bb-b7c5-48c7-bcf7-f4edb0b0599b
:END:
- Use =SPC /= for search by content on all files within a project.
- Use =SPC s f= to change the directory if needed
See: https://gist.github.com/pesterhazy/fabd629fbb89a6cd3d3b92246ff29779

**** TODO Some useful patterns
:PROPERTIES:
:ID:       29a84769-b7a1-4836-bb94-e18d96199f63
:END:

*** Keybindings
:PROPERTIES:
:ID:       cfa88190-9c54-4e0a-8ae5-57193005353e
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (evil-leader/set-key "/" 'spacemacs/helm-project-do-ag)
#+END_SRC
** Org-protocol
:PROPERTIES:
:ID:       18e93cfd-9cbc-48a1-a6cf-d448dc47781e
:END:
- [[id:5f48cafd-14d1-40e0-ae00-77b35d8542ef][Capturing using templates]]
- I have set up some mappings on tridactyl to ease the process of capturing:
  - =,l= for capturing links
  - =,s= for capturing selected text
  - =,r= for capturing using org-roam

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (require 'org-protocol)
#+END_SRC

** Org-babel
:PROPERTIES:
:ID:       0ca4afa9-8ad5-448f-85e7-53cb56dfacb5
:END:
Check [[https://github.com/dfeich/org-babel-examples]]

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote (
     (R . t)
     (calc . t)
     (ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (gnuplot . t)
     (latex . t)
     (ledger . t)
     (matlab . t)
     (org . t)
     (plantuml . t)
     (python . t)
     (shell . t)
     (sql . t)
     (sqlite . t)
     ;(ly . t)
  )))
  ;(defun org-babel-execute:yaml (body params) body)
#+END_SRC

** Org-mode
:PROPERTIES:
:ID:       e7b3db64-cfa8-4a96-81d2-b200e791831e
:END:
*** Org paths and important files
:PROPERTIES:
:ID:       7f5aaee2-5b0e-40d6-ab3e-da5c07bf1d9f
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (if (memq window-system '(w32))
      (setq my-home-dir "C:/Users/av")
    (setq my-home-dir (expand-file-name "~")))
  (setq my-org-directory (concat my-home-dir "/org/"))
  (setq my-org-roam-directory (concat my-home-dir "/org/exobrain/"))
  (setq my-org-journal-directory (concat my-org-roam-directory "journal/"))
  (setq my-agenda-directory (concat my-org-directory "tasks/"))
#+END_SRC

*** Org modules
:PROPERTIES:
:ID:       1c6970ca-fb59-468f-b1f0-937237fee014
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq org-modules (quote (org-habit)))
  (add-to-list 'org-modules 'org-protocol)
#+END_SRC

*** Org log drawer
:PROPERTIES:
:ID:       d3899946-47fc-4cde-8c69-b20863ba62d9
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq org-log-into-drawer "LOGBOOK")
#+END_SRC

*** Org agenda
:PROPERTIES:
:ID:       927806aa-8921-432c-832d-dff6d83563f1
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq org-agenda-files (directory-files-recursively my-agenda-directory "\\.org$"))
  ;; Doc: https://stackoverflow.com/a/29905161/1332764
  (setq org-agenda-include-diary t)
  (setq org-agenda-start-on-weekday 7)
  ;; (setq org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("HABIT" "REPEAT")))
  (setq org-agenda-custom-commands
   (quote (
     ;; gtd base states
     ("d" "TODO state" todo "TODO"
      ((org-agenda-overriding-header "TODO tasks")))
     ("s" "SOMEDAY state" todo "SOMEDAY"
      ((org-agenda-overriding-header "SOMEDAY tasks")))
     ("n" "NEXT state" todo "NEXT"
      ((org-agenda-overriding-header "NEXT tasks")))
     ("w" "WAITING state" todo "WAITING"
      ((org-agenda-overriding-header "WAITING tasks")))
     ("p" "PROJ state" todo "PROJ"
      ((org-agenda-overriding-header "PROJ tasks")))
     ("d" "DONE state" todo "DONE"
      ((org-agenda-overriding-header "DONE tasks")))
     ("c" "CANCELLED state" todo "CANCELLED"
      ((org-agenda-overriding-header "CANCELLED tasks")))
     ("k" "SKIPPED state" todo "SKIPPED"
      ((org-agenda-overriding-header "SKIPPED tasks")))
     ;; other filters
     ("l" "All actionable tasks" todo "TODO|NEXT|WAITING|PROJ"
      ((org-agenda-overriding-header "TODO tasks")))
     ("h" "Habits" tags-todo "+habit"
      ((org-agenda-overriding-header "Habits")))
     ("1" "ME" tags-todo "+ME"
      ((org-agenda-overriding-header "ME tag")))
     ("2" "RELATING" tags-todo "+RELATING"
      ((org-agenda-overriding-header "RELATING tag")))
     ("3" "DOING" tags-todo "+DOING"
      ((org-agenda-overriding-header "DOING tag")))
     ("i" "Important things to do"
      ((tags-todo "ME"
                  ((org-agenda-overriding-header "Me tag")))
       (tags-todo "RELATING"
                  ((org-agenda-overriding-header "Relating tag"))))
      nil nil)
  )))
#+END_SRC

#+RESULTS:
| d | TODO state             | todo                                                                                                                        | TODO      | ((org-agenda-overriding-header TODO tasks))      |         |      |                                             |
| s | SOMEDAY state          | todo                                                                                                                        | SOMEDAY   | ((org-agenda-overriding-header SOMEDAY tasks))   |         |      |                                             |
| n | NEXT state             | todo                                                                                                                        | NEXT      | ((org-agenda-overriding-header NEXT tasks))      |         |      |                                             |
| w | WAITING state          | todo                                                                                                                        | WAITING   | ((org-agenda-overriding-header WAITING tasks))   |         |      |                                             |
| p | PROJ state             | todo                                                                                                                        | PROJ      | ((org-agenda-overriding-header PROJ tasks))      |         |      |                                             |
| d | DONE state             | todo                                                                                                                        | DONE      | ((org-agenda-overriding-header DONE tasks))      |         |      |                                             |
| c | CANCELLED state        | todo                                                                                                                        | CANCELLED | ((org-agenda-overriding-header CANCELLED tasks)) |         |      |                                             |
| k | SKIPPED state          | todo                                                                                                                        | SKIPPED   | ((org-agenda-overriding-header SKIPPED tasks))   |         |      |                                             |
| l | All actionable tasks   | todo                                                                                                                        | TODO      | NEXT                                             | WAITING | PROJ | ((org-agenda-overriding-header TODO tasks)) |
| h | Habits                 | tags-todo                                                                                                                   | +habit    | ((org-agenda-overriding-header Habits))          |         |      |                                             |
| 1 | ME                     | tags-todo                                                                                                                   | +ME       | ((org-agenda-overriding-header ME tag))          |         |      |                                             |
| 2 | RELATING               | tags-todo                                                                                                                   | +RELATING | ((org-agenda-overriding-header RELATING tag))    |         |      |                                             |
| 3 | DOING                  | tags-todo                                                                                                                   | +DOING    | ((org-agenda-overriding-header DOING tag))       |         |      |                                             |
| i | Important things to do | ((tags-todo ME ((org-agenda-overriding-header Me tag))) (tags-todo RELATING ((org-agenda-overriding-header Relating tag)))) | nil       | nil                                              |         |      |                                             |

*** Org refile
:PROPERTIES:
:ID:       49443086-0929-4ff9-9227-f63b99f0545e
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq org-refile-targets (quote ((org-agenda-files :level . 1))))
  (setq org-refile-use-outline-path (quote full-file-path))
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

*** Org archive
:PROPERTIES:
:ID:       b34f10c4-d40f-4d3b-92c6-8626e6033c71
:END:
Use ~, s A~ to archive.

**** TODO FIXME Create subfolder structure if doesn't exists
:PROPERTIES:
:ID:       30d2e16f-2cba-4d12-b9a7-28d8a564efba
:END:

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (add-to-list 'load-path "~/.homesick/repos/dotfiles-spacemacs/home/.spacemacs.d/thirdparty/org-archive-subtree-hierarchical")
  (require 'org-archive-subtree-hierarchical)
  (defun org-archive-subtree-hierarchical-archive-dir ()
       (interactive)
       (let* ((org-archive-location (concat "~/org/archive/"
                                            (file-relative-name buffer-file-name "~/org/")
                                            "_archive::")))
         (org-archive-subtree-hierarchical)))
  ;(setq org-archive-subtree-default 'org-archive-subtree-hierarchical-archive-dir)
  (setq org-archive-default-command 'org-archive-subtree-hierarchical-archive-dir)
#+END_SRC
*** Org ids snippets
:PROPERTIES:
:ID:       3f14d0b5-cfef-4fe4-84de-59c6cc4a02cf
:END:
This snippet creates an id for each headline in org-mod

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (defun my/org-add-ids-to-headlines-in-file ()
    "Add ID properties to all headlines in the current file which
  do not already have one."
    (interactive)
    (org-map-entries 'org-id-get-create))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))
#+END_SRC

This snippet copies the id to the killring (F5) to be easy to reference sections

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (defun my/copy-id-to-clipboard() "Copy the ID property value to killring,
  if no ID is there then create a new unique ID.
  This function works only in org-mode buffers.

  The purpose of this function is to easily construct id:-links to
  org-mode items. If its assigned to a key it saves you marking the
  text and copying to the killring."
    (interactive)
    (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
      (setq mytmpid (funcall 'org-id-get-create))
      (kill-new mytmpid)
      (message "Copied %s to killring (clipboard)" mytmpid)
         ))

  ;; Check: https://emacs.stackexchange.com/questions/35283/in-spacemacs-how-to-customize-keybindings-that-are-condition-on-language-file
  (define-key org-mode-map [f5] 'my/copy-id-to-clipboard)
  (global-set-key [M-f1] 'my/copy-id-to-clipboard)
#+END_SRC

*** Org id-locations
:PROPERTIES:
:ID:       15a3771a-e002-4666-bf44-0602110c0fcc
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
    ;; ID
  ;; Use custom ID if present, otherwise create a new one when trying to
  ;; resolve links
  (setq org-id-link-to-org-use-id
        'create-if-interactive-and-no-custom-id)

  (add-hook 'org-insert-heading-hook 'org-id-get-create)
  (add-hook 'org-after-todo-state-change-hook 'org-id-get-create)
  (add-hook 'org-after-tags-change-hook 'org-id-get-create)

  (setq org-id-locations-file (concat my-org-directory ".org-id-locations"))
#+END_SRC

*** Org journal
:PROPERTIES:
:ID:       ebeaa5f7-7e78-420d-b248-7a19a40075e6
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Bemacs/org#org-journal-support
  ;(setq org-journal-dir (concat my-journal-directory))
  ;(setq org-journal-file-format "%Y-%m-%d")
  ;(setq org-journal-date-prefix "* ")
  ;;;(setq org-journal-date-format "%A, %B %d %Y")
  ;(setq org-journal-date-format "%Y-%m-%d")
  ;(setq org-journal-time-prefix "* ")
  ;(setq org-journal-time-format "%Y-%m-%d %H:%M")
  ;(setq org-journal-time-format "%H:%M")
  (use-package org-journal
    :bind
    ("C-c n j" . org-journal-new-entry)
    :custom
    (org-journal-date-prefix "#+TITLE: ")
    (org-journal-file-format "%Y-%m-%d.org")
    (org-journal-dir my-org-journal-directory)
    (org-journal-date-format "%A, %d %B %Y"))
#+END_SRC

*** Org states workflow
:PROPERTIES:
:ID:       752ff35c-e847-42ee-acf8-300ee0fde3ed
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; STATES
  ;; TIP: ~M-x org-mode-restart~ refreshes the org-mode cache
  (setq org-todo-keywords '((type "TODO(t/!)" "SOMEDAY(s/!)" "NEXT(n/!)" "WAITING(w@/!)" "PROJ(p)" "REPEAT(r/!)" "MEETING(m/!)" "|" "DONE(d)" "CANCELLED(c@/!)" "SKIPPED(k@/!)")))
  ;; (setq org-todo-keywords '(
  ;;   (sequence "TODO(t/!)" "NEXT(n/!)" "|" "DONE(d/!)")
  ;;   (sequence "HABIT(x)" "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")
  ;; ))
#+END_SRC

*** Org tags
:PROPERTIES:
:ID:       b3d83cf2-0fd4-4811-a6ab-4fcb80396fe9
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; TAGS
  (setq org-tag-persistent-alist (quote (
    ("@home" . ?h)
    ("@work" . ?w)
    ("@phone" . ?p)
    ("@notebook" . ?n)
    ("@desktop" . ?d)
    ("review" . ?r)
    (:startgrouptag)
    ("me" . ?1)
    (:grouptags)
    ("spirit" . ?s)
    ("emotions" . ?e)
    ("mind" . ?m)
    ("body" . ?b)
    (:endgrouptag)
    (:startgrouptag)
    ("relating" . ?2)
    (:grouptags)
    ("partner" . ?l)
    ("parents" . ?o)
    ("extfamily" . ?x)
    ("neighbor" . ?g)
    ;; ("friends" . ?f)
    (:endgrouptag)
    (:startgrouptag)
    ("doing" . ?3)
    (:grouptags)
    ("finances" . ?f)
    ("stayinmalaga" . ?y)
    ("living" . ?v)
    (:endgrouptag)
  )))
#+END_SRC

*** Org faces (todo and tags)
:PROPERTIES:
:ID:       f52d1764-e3df-4fb3-a508-9182d56a1eb7
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; FACES
  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "DarkOrange1" :weight bold))
          ("SOMEDAY" . (:foreground "sea green"))
          ("DONE" . (:foreground "light sea green"))
          ("CANCELLED" . (:foreground "forest green"))
          ("WAITING" . (:foreground "blue"))
         ))
  (setq org-tag-faces
        '(("ME" . (:foreground "forest green" :weight bold))
          ("SPIRIT" . (:foreground "lime green"))
          ("MIND" . (:foreground "forest green"))
          ("BODY" . (:foreground "yellow"))
         ))
#+END_SRC

*** Org capture templates
:PROPERTIES:
:ID:       5f48cafd-14d1-40e0-ae00-77b35d8542ef
:END:
**** Usage
:PROPERTIES:
:ID:       02027445-a99d-4583-961c-04c47f94e7dd
:END:
Use the following extensions:
- Chrome: [[https://chrome.google.com/webstore/detail/org-capture/kkkjlfejijcjgjllecmnejhogpbcigdc]]
- Firefox: [[https://addons.mozilla.org/en-US/firefox/addon/org-capture/]]

Once installed an icon on the top of the browser should appear. To setup the
handler and the templates read: [[https://github.com/sprig/org-capture-extension]]

The '(server-start)' is needed under the 'user-init()' function on the init.el file.

**** Config
:PROPERTIES:
:ID:       c01b085c-97a5-4402-9682-eb2ff474bb0b
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq org-default-capture-file (concat my-org-directory "capture.org"))

  ;; Doc: https://github.com/sprig/org-capture-extension
  ;; (defun transform-square-brackets-to-round-ones(string-to-transform)
  ;;   "Transforms [ into ( and ] into ), other chars left unchanged."
  ;;   (concat
  ;;    (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
  ;;   )

  ;; CAPTURE
  (setq org-capture-templates
    '(
      ;; Doc: https://github.com/sprig/org-capture-extension
      ;; Doc: https://gist.github.com/cjp/64ac13f5966456841c197f70c7d3a53a
      ("p" "Protocol" entry (file+headline "~/org/capture.org" "Inbox")
        "* [[%:link][%:description]]\n- Source: %:link\n- Title: %:description\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n")
      ("L" "Browser link" entry (file+headline "~/org/capture.org" "Inbox")
        "* [[%:link][%:description]]\n- Source: %:link\n- Title: %:description\n- Captured on: %u\n")

      ;; Templates for the TASKS keyword sequence
      ("t" "Tasks")

      ;; TEMPLATE A
      ("th" "SMART Habit" entry (file org-default-capture-file)
       "* REPEAT %^{Describe the task}       :HABIT:
  %?
  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")
  :STYLE:    habit
  :SMART:
  :Specific:   %^{What is the purpose of this goal}
  :Measurable: %^{How can you measure it}
  :Activity:   %^{What activity do we need to do}
  :Resources:  %^{What resources do we need}
  :Timebox:    %^{What time do we need to spend on that}
  :Reviewed:
  :LOGBOOK:
  - Recorded: %U
  :HoursWeek:  Get it automatically
  :END:" :empty-lines 1)
  ))
#+END_SRC

*** Org export backends
:PROPERTIES:
:ID:       86f93c3f-c1e4-49b1-beb7-66dc2a65efe2
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; EXPORT
  (setq org-export-backends
   (quote
    (beamer html icalendar latex man odt freemind taskjuggler)))
#+END_SRC

*** Org-download
:PROPERTIES:
:ID:       d111973a-2c1d-48bb-8df5-ec1e931ebf23
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (use-package org-download
    :after org
    ;:bind
    ;(:map org-mode-map
    ;      (("s-Y" . org-download-screenshot)
    ;       ("s-y" . org-download-yank))))
    :custom
      (org-download-screenshot-method "scrot -s %s")
      (org-download-image-dir "~/org/images/")
      (org-download-screenshot-method "scrot -s %s")
      (org-download-method 'directory)
      (org-download-screenshot-file "~/tmp/screenshot.png"))
#+END_SRC
*** Org misc
:PROPERTIES:
:ID:       c33e681b-e307-4a6c-9eb2-e3eb43d87f09
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; ----------------------------------------------------------------
  ;; Org Misc
  ;; ----------------------------------------------------------------
  ;; When hitting alt-return on a header, please create a new one without
  ;; messing up the one I'm standing on.
  (setq org-insert-heading-respect-content t)
  ;; Keep the indentation well structured by. OMG this is a must have. Makes
  ;; it feel less like editing a big text file and more like a purpose built
  ;; editor for org mode that forces the indentation.
  ;; (setq org-startup-indented t)
  ;; Open notes on a separate frame
  (setq org-noter-notes-window-location (quote (quote other-frame)))
  ;; This should allow to continue on last page but it is not working.
  ;; Needs review
  (setq org-noter-auto-save-last-location t)

  ;; Exporting with utf8x by default for greek characters support
  '(org-latex-inputenc-alist (quote (("" . "(\"utf8\" . \"utf8x\")"))))
#+END_SRC
*** Property inheritance
:PROPERTIES:
:ID:       11ec4483-ba91-4791-9a0d-de5e3d11e3f2
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq org-use-property-inheritance
        (list "project"))
#+END_SRC
*** Alpha org
:PROPERTIES:
:ID:       40074c58-7fa2-4546-89c1-61cd69d360d9
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;(global-unset-key (kbd "M-SPC"))
  ;(general-create-definer alpha-org/general-def
  ;  :prefix "M-SPC"))
#+END_SRC

** Spell check
:PROPERTIES:
:ID:       2983cd9d-9485-477b-bede-71da1193ba01
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;(setq spell-checking-enable-auto-dictionary t)
  ;(setq enable-flyspell-auto-completion nil)
#+END_SRC

** Pinentry
:PROPERTIES:
:ID:       9fd2b0b4-0ac0-48e2-8477-93594bf3d706
:END:
Doc: https://emacs.stackexchange.com/a/32882
Doc: https://github.com/syl20bnr/spacemacs-elpa-mirror/blob/master/gnu/pinentry-readme.txt

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (pinentry-start)
#+END_SRC

** Calendar
:PROPERTIES:
:ID:       f2a629d6-d76c-4345-b70f-c8fd7ae33688
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;;(setq holiday-christian-holidays nil)
  ;;(setq holiday-hebrew-holidays t)
  ;;(setq holiday-islamic-holidays nil)
  ;;(setq holiday-bahai-holidays nil)
  ;;(setq holiday-oriental-holidays nil)

  ; Doc: https://www.emacswiki.org/emacs/CalendarWeekNumbers
  (copy-face 'default 'calendar-iso-week-header-face)
  (set-face-attribute 'calendar-iso-week-header-face nil
                      :height 1.0 :foreground "salmon")
  (setq calendar-intermonth-header
        (propertize "W"
                    'font-lock-face 'calendar-iso-week-header-face))

  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil
                      :height 1.0 :foreground "salmon")
  (setq calendar-intermonth-text
        '(propertize
          (format "%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))

#+END_SRC

** Eglot
:PROPERTIES:
:ID:       2c36aaa7-e232-4764-9219-258418a5d182
:END:
See: https://cestlaz.github.io/post/using-emacs-74-eglot/

*** Base
:PROPERTIES:
:ID:       d59c98f2-6caf-4d11-b044-71d5dccfdaac
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (require 'eglot)
#+END_SRC

*** Python
:PROPERTIES:
:ID:       8c2c68dc-bb4c-47a1-b831-b228d60a3c3b
:END:

*Install* the following eggs:
#+BEGIN_SRC sh
  pip install --user python-language-server[all]

  pip install --user pyls-mypy
  pip install --user pyls-isort
  pip install --user pyls-black
#+END_SRC

*** C/C++
:PROPERTIES:
:ID:       877b9e2e-3c89-4990-9318-54ac1d7d038d
:END:

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-10"))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
#+END_SRC
** Python
:PROPERTIES:
:ID:       a42c6a98-1dec-45b7-8975-fa48f24b5ac1
:END:
*** Refactoring
:PROPERTIES:
:ID:       760a8007-6c06-426c-afc3-456bcd83fe2a
:END:
**** [[https://github.com/abingham/emacs-traad][GitHub - abingham/emacs-traad: Emacs client for the traad Python refactoring tool.]]
:PROPERTIES:
:ID:       ad173baa-3bee-4449-94ef-05795e233429
:END:
 - Source: https://github.com/abingham/emacs-traad
 - Title: GitHub - abingham/emacs-traad: Emacs client for the traad Python refactoring tool.
 - Captured on: [2020-09-06 Sun]

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC

Allow using pipenv from org-mode
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (add-to-list 'spacemacs--python-pipenv-modes 'python-mode 'org-mode)
#+END_SRC

Disable pylint/flake due to bug related with pipenv
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
   (add-hook 'python-mode-hook (lambda ()
                                  ; 'eglot-ensure
                                  (flycheck-mode 0)
                                  (semantic-mode 1)
                                  (setq flycheck-checker 'python-pylint
                                        flycheck-checker-error-threshold 900
                                        flycheck-pylintrc "~/.pylintrc")))
   (setq python-check-command nil)
#+END_SRC
** Plantuml
:PROPERTIES:
:ID:       e4daaf62-5d72-4a60-8e48-f3cb7b9b393f
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq org-plantuml-jar-path
    (expand-file-name "/opt/plantuml/plantuml.jar"))
#+END_SRC

** Auto documentation with helm-descbinds-mode
:PROPERTIES:
:ID:       4ae46422-1f3f-4957-919c-3aadf053a0ba
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; (require 'helm-descbinds)
  ;; (helm-descbinds-mode)
#+END_SRC

** Misc
:PROPERTIES:
:ID:       e37a0002-5c81-46a2-8ab4-07a34225a559
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; Do not ask for confirmation on some file configs
  (put 'org-todo-keyword-faces 'safe-local-variable #'listp)
  ;(put '(eval flyspell-buffer) 'safe-local-variable #'listp)
  (add-to-list 'safe-local-variable-values
               '(eval flyspell-buffer))

  ; Disable hl-todo-mode: See: https://www.reddit.com/r/spacemacs/comments/b9kwc0/customized_org_faces_being_overridden_in_buffer/?utm_source=share&utm_medium=web2x&context=3
  (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1)))

  ;; Do not ask for confirmation to evaluate babel blocks
  (setq org-confirm-babel-evaluate nil)

  ;; Familiar zooming with Ctrl+ and Ctrl-
  (define-key global-map (kbd "C-=") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)

  ;; Flyspell commit messages
  (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

  (custom-set-variables
   '(helm-ag-base-command "rg --vimgrep --no-heading --smart-case"))
#+END_SRC

** Org-impress                                                  :thirdparty:
:PROPERTIES:
:ID:       2cac38bc-6d2b-4ede-870c-953662c6ed4b
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (add-to-list 'load-path "~/.spacemacs.d/thirdparty/org-impress-js.el")
  (require 'ox-impress-js)
#+END_SRC

** Org-reveal                                                   :thirdparty:
:PROPERTIES:
:ID:       ec770458-02d8-41fc-9012-0a5cc980abd2
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;;(add-to-list 'load-path "~/.spacemacs.d/thirdparty/org-reveal")
  ;;(require 'ox-reveal)
#+END_SRC

** Org-re-reveal                                                :thirdparty:
:PROPERTIES:
:ID:       e3ef5095-d0f9-40d2-a81c-a22d38c9449f
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (add-to-list 'load-path "~/.spacemacs.d/thirdparty/org-re-reveal")
  (require 'org-re-reveal)
#+END_SRC

** ox-hugo
:PROPERTIES:
:ID:       6cdb69cf-8c06-4136-abbc-4c27723be7ca
:END:
;; See: https://chaoruan.org/post/ox-hugo-install-issue-with-spacemacs/
;; #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
;;   (use-package ox-hugo
;;     :ensure t
;;     :after ox)
;; #+END_SRC
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (setq org-hugo-external-file-extensions-allowed-for-copying
    '("jpg" "jpeg" "tiff" "png" "svg" "gif"
      "apkg"
      "mp4"
      "pdf" "odt"
      "doc" "ppt" "xls"
      "docx" "pptx" "xlsx"))
  (with-eval-after-load 'ox-hugo
    (defun my/conditional-hugo-enable ()
      (save-excursion
        (if (cdr (assoc "SETUPFILE" (org-roam--extract-global-props '("SETUPFILE"))))
            (org-hugo-auto-export-mode +1)
          (org-hugo-auto-export-mode -1))))
    (add-hook 'org-mode-hook #'my/conditional-hugo-enable))
#+END_SRC

** Anki-editor
:PROPERTIES:
:ID:       4349ddaf-b1ae-4834-8e19-14df7fc10192
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (use-package anki-editor
    :defer 10
    :after org
    :bind (:map org-mode-map
              ("<f12>" . anki-editor-cloze-region-dont-incr)
              ("<f11>" . anki-editor-cloze-region-auto-incr)
              ("<f10>" . anki-editor-reset-cloze-number)
              ("<f9>"  . anki-editor-push-tree)
          )
    :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
    :config
    (setq anki-editor-create-decks t
          anki-editor-org-tags-as-anki-tags t)

    (defun anki-editor-cloze-region-auto-incr (&optional arg)
      "Cloze region without hint and increase card number."
      (interactive)
      (anki-editor-cloze-region my-anki-editor-cloze-number "")
      (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
      (forward-sexp))
    (defun anki-editor-cloze-region-dont-incr (&optional arg)
      "Cloze region without hint using the previous card number."
      (interactive)
      (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
      (forward-sexp))
    (defun anki-editor-reset-cloze-number (&optional arg)
      "Reset cloze number to ARG or 1"
      (interactive)
      (setq my-anki-editor-cloze-number (or arg 1)))
    (defun anki-editor-push-tree ()
      "Push all notes under a tree."
      (interactive)
      (anki-editor-push-notes '(4))
      (anki-editor-reset-cloze-number))
    ;; Initialize
    (anki-editor-reset-cloze-number)
    )
#+END_SRC

*** Howto
:PROPERTIES:
:ID:       d960ad25-650d-412a-9f14-0de935059368
:END:
- Start Anki
- ~M-x anki-editor-mode~
- Go to root tree
- ~M-x anki-editor-push-tree~

** Org-roam
:PROPERTIES:
:ID:       39078d54-7c4d-47e0-9848-ecbbf36be51e
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (use-package org-roam
    :after org
    :hook (org-mode . org-roam-mode)
    :custom
      (org-roam-directory my-org-roam-directory)
      (org-roam-graphviz-executable "/usr/bin/dot")
      (org-roam-dailies-directory my-org-journal-directory)
    :bind
      ("C-c n l" . org-roam)
      ("C-c n i" . org-roam-insert)
      ("C-c n c" . org-roam-capture)
      ("C-c n b" . org-roam-switch-to-buffer)
      ("C-c n f" . org-roam-find-file)
      ("C-c n t" . org-roam-today)
      ("C-c n g" . org-roam-graph-show))

  ; Easy navigation witn M and keys
  ; See: https://www.orgroam.com/manual/Browsing-History-with-winner_002dmode.html#Browsing-History-with-winner_002dmode
  (define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
  (define-key winner-mode-map (kbd "<M-right>") #'winner-redo)

  ;(require 'org-roam-protocol)
  ;(use-package! org-roam-protocol
  ;  :after org-protocol)

  (use-package org-roam-server
    :ensure t
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8081
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))
#+END_SRC

#+RESULTS:
: org-roam-protocol

** Deft
:PROPERTIES:
:ID:       6aa06574-8b83-479b-98ec-58acbb2440bf
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    ;(deft-directory (concat my-org-directory "journal/")))
    (deft-directory my-org-directory))
#+END_SRC
** Outshine (Org-mode bullets in Beancount)                     :thirdparty:
:PROPERTIES:
:ID:       66cd304d-0dad-43c2-a153-eb48e2764cf5
:END:
Doc: https://github.com/syl20bnr/spacemacs/issues/5258

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ; Source: https://www.reddit.com/r/emacs/comments/aay01i/announce_outshine_30_has_been_released/
  (require 'outshine)
  (add-hook 'beancount-mode-hook 'outshine-mode)
#+END_SRC
** PDF Tools (org-noter)                                        :thirdparty:
:PROPERTIES:
:ID:       7e097171-9a60-4ed1-9a2b-3f9b2e41f071
:END:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (add-to-list 'load-path "~/.spacemacs.d/thirdparty/pdf-tools-org")
  (require 'pdf-tools-org)
#+END_SRC

** Edit server                                                  :thirdparty:
:PROPERTIES:
:ID:       e9bc2073-0307-408c-aa49-329a3271e1ae
:END:
Doc: https://www.emacswiki.org/emacs/Edit_with_Emacs

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;; ----------------------------------------------------------------
  ;; Third party modules
  ;; ----------------------------------------------------------------

  (add-to-list 'load-path "~/.spacemacs.d/thirdparty/editserver")
  (require 'edit-server)
  (edit-server-start)
#+END_SRC

** Openwith                                                     :thirdparty:
:PROPERTIES:
:ID:       f7d43e3b-5b8e-4c70-994f-631be17b0565
:END:
Doc: https://stackoverflow.com/questions/51006855/open-mp4-files-from-orgmode

#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  (require 'openwith)
  (openwith-mode t)
  (setq openwith-associations '(("\\.mp4\\'" "mpv" (file))))
#+END_SRC

** DTK                                                          :thirdparty:
:PROPERTIES:
:ID:       184236d2-a056-44db-a369-67cb9a8aff63
:END:
Doc: https://github.com/dtk01/dtk
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/config-public/public-config.el
  ;;(add-to-list 'load-path "~/.spacemacs.d/thirdparty/diatheke.el")
  ;;(require 'diatheke)
  (add-to-list 'load-path "~/.spacemacs.d/thirdparty/dtk")
  (require 'dtk)

  (use-package dtk
    :bind (("C-c B" . dtk-bible))
    :custom
    (dtk-default-module "nvi")
    (dtk-default-module-category "Biblical Texts")
    (dtk-word-wrap t)
    )
#+END_SRC
** Sword-to-org
:PROPERTIES:
:ID:       cdee25b8-59ba-4a75-9ea9-ba60fb9bde02
:END:
Doc: https://github.com/alphapapa/sword-to-org

Use =M-x sword-to-org-insert-outline=, then type the passage to be inserted and
finally select the appropriate module.

** Novel
:PROPERTIES:
:ID:       34cdbf57-ee91-4474-a508-071b1a9e08dd
:END:

** Pass
:PROPERTIES:
:ID:       e71e9309-1335-4256-856f-7b18cabee091
:END:
*** Usage
:PROPERTIES:
:ID:       cab1e4ef-ed48-4630-9966-1ff76c0ea226
:END:
=M-x password-store-copy-field= and then select the entry and the field
* Tasks [22%] [2/9]                                                :noexport:
:PROPERTIES:
:ID:       c268a475-d7d6-4970-a40b-548184846245
:END:
** TODO Review which files are able to refile
:PROPERTIES:
:ID:       b11d3f86-a7d1-41cf-ad79-2e566c083886
:END:
** TODO ox-json
:PROPERTIES:
:ID:       56968c4a-c4a1-4479-ad5d-2c1ac61c103e
:END:
- https://www.reddit.com/r/emacs/comments/ccwl4r/i_made_a_json_export_back_end_for_org_mode/
** TODO ob-translate
:PROPERTIES:
:ID:       13c37064-a5d2-4d18-9f41-479cde518461
:END:
- https://github.com/krisajenkins/ob-translate
** TODO ob-browser
:PROPERTIES:
:ID:       4c62d1f7-3dda-48ed-80b4-0de6ff162a7c
:END:
- https://github.com/krisajenkins/ob-browser
** TODO org-super-agenda
:PROPERTIES:
:ID:       a1341cf3-75c7-44a9-a9a1-4a95e5c91e3e
:END:
** TODO org-kanban
:PROPERTIES:
:ID:       86cd7882-01c6-416a-bab8-2cec3fb53168
:END:
- https://github.com/lijigang/ljg-dotfile/blob/master/spacemacs-config.org
** TODO poet theme for writing?
:PROPERTIES:
:ID:       ca3c39e4-d4a2-40bc-ac3c-321cd1a61e1a
:END:
** FIX edit-server
:PROPERTIES:
:ID:       b6fd6258-ba41-4951-bbca-5a5f807e59b9
:END:
** DONE [[https://org-roam.readthedocs.io/en/latest/][Org-Roam]]
CLOSED: [2020-09-06 Sun 21:26]
   :PROPERTIES:
   :ID:       a2e6b174-4f41-4a57-a6ab-0672cf6eb2ad
   :END:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-09-06 Sun 21:26]
   :END:
 - Source: https://org-roam.readthedocs.io/en/latest/
 - Title: Org-Roam: Roam + Org-Mode = ♥
 - Captured on: [2020-02-21 Fri]
** DONE FIX which files are within the agenda
CLOSED: [2020-09-06 Sun 21:26]
:PROPERTIES:
:ID:       9ecb4807-a028-4be3-896a-f00e75722a00
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-09-06 Sun 21:26]
:END:
